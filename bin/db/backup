#!/bin/bash

set -euo pipefail

###################
# throat-clearing #
###################

# time
timestamp=`date "+%Y-%m-%d"`

# gpg
keyring_path="/srv/signalboost/keyrings/live/pubring.kbx"
gpg="gpg --keyring ${keyring_path} --trust-model always -r 8DEA5441 -r 97B47404"

# paths
project_root="/srv/signalboost"
backup_dir="/srv/signalboost/backups/${timestamp}"

# make the folder for this backup
mkdir -p ${backup_dir}

#############
# backup db #
#############

pg_dump="docker-compose --file ${project_root}/docker-compose.yml exec -T db pg_dump -U postgres signalboost"
psql_backup_path="${backup_dir}/sb_psql_backup_${timestamp}.tar.gpg"
$pg_dump | $gpg > $psql_backup_path

###################
# backup keystore #
###################

down="docker-compose --file ${project_root}/docker-compose.yml down"
tar="tar cf /srv/signalboost/${db_volume_backup_path} /var/lib/docker/volumes/signalboost_postgres_data/_data"
keystore_backup_path="${backup_dir}/sb_keystore_backup_${timestamp}.tar.gpg"
down="docker-compose up -d"

$down
$tar | $gpg > $keystore_backup_path
$up


######################### 
# scp backups to target #
#########################

# here, we use the `sb_backup` host defined in /root/.ssh/config
scp /srv/signalboost/${backup_path} sb_backup:/srv/signalboost/backups/

# remove old backups on remote
ssh "rm -rf /srv/signalboost/backups/!($timestamp)"

# remove local backup
rm ${backup_dir}

# alternately (to be more explicit?), we could do this for the push step:
# source project/root/.env # <-- which contains $BACKUP_IP
# scp -i /home/sb_deploy/.ssh/id_sb_deploy sb_deploy@${$BACKUP_IP}:/srv/signalboost/backups

# TODO(aguestuser|2020-01-15)
# 
# (preferably via new tasks in provision.yml or a new provision_backup.yml
#  but scp calls would suit in a pinch!)
# 
# * load /ansible/files/crontab/root to signalboost:/var/spool/cront/crontab/root
# * load /ansible/files/deploy_keys/.ssh to signalboost:/root/.ssh
# * create sb_deploy user on signalboost prod 
#   * maybe restrict the directories it can read from? since it has a passwordless ssh key?
# * add sb_deploy on sb_backup and add `id_sb_deploy.pub` to its authorized keys
#   * such already exists on sb_backup, but it has root and probably should not?
#   * we only want it to be able to write to one dir!)
#   *whatever permissions it has, it needs to be able to write to /srv/signalboost/backups
