#!/usr/bin/env bash

pushd `pwd` > /dev/null # store current dir
cd `dirname "$0"` # cd to script path
cd ../..

timestamp=`date "+%Y-%m-%d"`

backup_dir=backups/${timestamp}
mkdir -p ${backup_dir}

psql_backup_path=${backup_dir}/sb_psql_backup_${timestamp}.tar
db_volume_backup_path=${backup_dir}/sb_db_volume_backup_${timestamp}.tar
keystore_volume_backup_path=${backup_dir}/sb_keystore_volume_backup_${timestamp}.tar

#####################

echo "--- making psql backup..."
docker-compose exec db pg_dump -U postgres -F t signalboost -f /${psql_backup_path}

echo '---encrypting psql backup...'
gpg --trust-model always \
    -r 97B47404 -r 8DEA5441 \
    -e /srv/signalboost/${psql_backup_path}

echo "-- removing unencrypted psql packup..."
rm /srv/signalboost/${psql_backup_path}

echo "=== psql backup done."

#####################

echo "--- making db volume backup..."
tar cf /srv/signalboost/${db_volume_backup_path} \
    /var/lib/docker/volumes/signalboost_postgres_data/_data

echo "--- encrypting db volume backup..."
gpg --trust-model always \
    -r 97B47404 -r 8DEA5441 \
    -e /srv/signalboost/${db_volume_backup_path}

echo "--- removing unencrypted db volume backup..."
rm /srv/signalboost/${db_volume_backup_path}

echo "=== db volume backup done."

#####################

echo "--- making keystore volume backup..."
tar cf /srv/signalboost/${keystore_volume_backup_path} \
    /var/lib/docker/volumes/signalboost_signal_data/_data

echo "--- encrypting keystore volume backup..."
gpg --trust-model always \
    -r 97B47404 -r 8DEA5441 \
    -e --yes /srv/signalboost/${keystore_volume_backup_path}

echo "--- removing unencrypted keystoere volume backup..."
rm /srv/signalboost/${keystore_volume_backup_path}

echo "=== keystore backup done."

#####################

echo "=== ALL DONE! Find backups in:"
echo ""
echo "    /srv/signalboost/${backup_dir}"
echo ""


# TODO(aguestuser|2019-01--05):
# create a step to push the backup to backup server via scp
# one possible design:
# - create an sb_deploy user on the backup target machine
# - create a key controlled by that user on this machine
#   with something like:
#   ssh-keygen -t ed25519 -o -a 100 -f /root/.ssh/id_sb_deploy
# - then scp to the backup target with something like:
#   scp -i /root/.ssh/id_sb_deploy ${backup_path} sb_deploy@$BACKUP_IP:/home/sb_deploy/backups/
# - and do all of that in a chron job that we can deploy to new machines with ansible!

# for now, aguestuser does this from the backup target:
# scp -i ~/.ssh/id_tikva_aguestuser signalboost:/srv/signalboost/${backup_path} /home/aguestuser/-/team-friendo/backups/


popd > /dev/null
