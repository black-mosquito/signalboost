---
- name: Deploy Signalboost
  become: true
  hosts: signalboost

  environment:
    NODE_ENV: production

  vars:
    homedir: /srv/signalboost
    host_url: "{{ lookup('env', 'SIGNALBOOST_HOST_URL') }}"
    api_token: "{{ lookup('env', 'SIGNALBOOST_API_TOKEN') }}"
    env_file: "files/.env"
    secrets_method: copy

  tasks:

  #########
  # CLONE #
  #########

  - name: Pull signalboost repository from 0xacab
    git:
      repo: https://0xacab.org/team-friendo/signalboost
      dest: "{{ homedir }}"
      force: true
      version: "{{ branch | default('master') }}"
    tags: clone

  - name: Deploy environment file using blackbox
    command: ./bin/blackbox/postdeploy
    args:
      chdir: "{{ homedir }}"
    tags: clone
    when: secrets_method == "blackbox"

  - name: Deploy environment file by copying local file
    copy:
      src: "{{ env_file }}"
      dest: "{{ homedir }}/.env"
    tags: clone
    when: secrets_method == "copy"

  #######################
  # BUILD DOCKER IMAGES #
  #######################

  - name: Load base dockerfiles
    copy:
      src: files/docker/
      dest: /srv/signalboost/docker/
    tags: docker

  - name: Build signalboost container
    command: docker build -f /srv/signalboost/docker/signalboost.dockerfile -t signalboost:latest /srv/signalboost
    register: build_output
    tags: docker

  - name: Build signald container
    command: docker build -f /srv/signalboost/docker/signald.dockerfile -t signald:latest /srv/signalboost
    register: build_output
    tags: docker

  ########
  # STOP #
  ########

  - name: Stop app
    command: ./bin/shutdown
    args:
      chdir: "{{ homedir }}"
    tags: stop

  ###########
  # PREPARE #
  ###########

  - name: Install node packages
    command: "docker-compose run --entrypoint '/signalboost/bin/entrypoint/install' app"
    args:
      chdir: "{{ homedir }}"
    tags: prepare

  - name: Setup database, run migrations
    command: "docker-compose run --entrypoint /signalboost/bin/db/setup app"
    args:
      chdir: "{{ homedir }}"
    tags: prepare

  # to ensure ACMEv2 compatibility
  # (as per, e.g.: https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion/issues/598)
  - name: Ensure we are running latest version of letsencrypt companion
    command: "docker-compose pull letsencrypt"
    args:
      chdir: "{{ homedir }}"
    tags: prepare


  - name: Stop containers used for install & db setup
    command: "docker-compose down"
    args:
      chdir: "{{ homedir }}"
    tags: prepare

  #########
  # START #
  #########

  - name: Start app
    command: "docker-compose up -d"
    args:
      chdir: "{{ homedir }}"
    register: docker_up_result

  # - debug:
  #     var: docker_up_result

  ######################
  # AVAILABILITY CHECK #
  ######################

  - name: Ping nextcloud instance until it is available
    shell: SIGNALBOOST_API_TOKEN="{{ api_token }}" SIGNALBOOST_HOST_URL="{{ host_url }}" ./bin/check-availability
    args:
      chdir: "{{ homedir }}"
    register: health_check_output
    changed_when: false
    failed_when: health_check_output.rc != 0
    tags: health_check
